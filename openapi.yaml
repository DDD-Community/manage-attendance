openapi: 3.0.0
info:
  title: DDD Attendance Management API
  version: 1.0.0
  description: |
    DDD 커뮤니티 출석 관리를 위한 API 서비스입니다.
    
    ## 주요 기능
    - JWT 기반 인증
    - 소셜 로그인 (Google, Kakao)
    - QR 코드 생성 및 검증
    - 프로필 관리
    - 초대 시스템
    - 일정 관리
    
    ## 응답 형식
    모든 API 응답은 다음 형식을 따릅니다:
    ```json
    {
      "code": 200,
      "message": "작업 성공 메시지",
      "data": { ... }
    }
    ```
    
    ## 에러 코드
    - 200: 성공
    - 201: 생성 성공
    - 400: 잘못된 요청
    - 401: 인증 실패
    - 403: 권한 없음
    - 404: 리소스 없음
    - 500: 서버 에러

servers:
  - url: /api/v1
    description: API v1 서버

tags:
  - name: health-check
    description: 서버 상태 확인 관련 작업
  - name: auth
    description: 사용자 인증 관련 작업
  - name: invite-code
    description: 초대코드 관련 작업
  - name: user
    description: 사용자 등록 및 관리 관련 작업
  - name: qr
    description: QR 코드 관련 작업
  - name: schedule
    description: 스케쥴 관련 작업
  - name: attendance
    description: 출석 관련 작업

paths:
  /health/:
    get:
      tags:
        - health-check
      summary: 서버 헬스 체크
      description: 서버의 상태를 확인하기 위한 헬스 체크 엔드포인트입니다.
      responses:
        '200':
          description: 서버가 정상적으로 작동 중
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "healthy"
                      timestamp:
                        type: string
                        format: date-time
                        description: 요청 시각 (ISO8601 포맷, UTC)
                        example: "2024-10-06T12:34:56Z"

  /auth/login/:
    post:
      summary: 로그인
      description: JWT 토큰을 사용한 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "로그인 성공"
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                      refresh_token:
                        type: string
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register/:
    post:
      summary: 회원가입
      description: 새로운 사용자 등록
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "회원가입 성공"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profiles/me/:
    get:
      summary: 내 프로필 조회
      description: 현재 로그인한 사용자의 프로필 정보 조회
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "프로필 조회 성공"
                  data:
                    $ref: '#/components/schemas/Profile'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /qrcodes/generate/:
    post:
      summary: QR 코드 생성
      description: 새로운 QR 코드 문자열 생성
      security:
        - BearerAuth: []
      responses:
        '201':
          description: QR 코드 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "QR 코드 생성 성공"
                  data:
                    $ref: '#/components/schemas/QRCode'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /qrcodes/validate/:
    post:
      summary: QR 코드 검증
      description: QR 코드 문자열의 유효성 검사
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qr_string:
                  type: string
      responses:
        '200':
          description: QR 코드 검증 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "QR 코드 검증 성공"
                  data:
                    type: object
                    properties:
                      valid:
                        type: boolean
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '410':
          description: QR 코드 만료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schedules/:
    get:
      summary: 일정 목록 조회
      description: 모든 일정 목록 조회
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 일정 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "일정 목록 조회 성공"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
    post:
      summary: 일정 생성
      description: 새로운 일정 생성
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time
      responses:
        '201':
          description: 일정 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "일정 생성 성공"
                  data:
                    $ref: '#/components/schemas/Schedule'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          description: 에러 코드
        message:
          type: string
          description: 에러 메시지
        data:
          type: object
          description: 에러 상세 정보

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'

    Profile:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        bio:
          type: string
        avatar:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    QRCode:
      type: object
      properties:
        qr_string:
          type: string
          description: QR 코드 문자열
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    Schedule:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        created_by:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
